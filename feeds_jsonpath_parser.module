<?php
/**
 * @file
 * Parse a JSON document using JSONPath.
 */

/**
 * Defines which commit to checkout from flow/jsonpath.
 */
define('FEEDS_JSONPATH_PARSER_LIBRARY_VERSION', '0.8.0');

/**
 * Implements hook_autoload_info().
 */
function feeds_jsonpath_parser_autoload_info() {
  $autoloads = array(
    'FeedsJSONPathParser' => 'FeedsJSONPathParser.inc',
  );
  if (!class_exists('Flow\JSONPath\JSONPath')) {
    // If it hasn't been loaded with XAutoload or Composer, try to load library.
    $autoloads += array(
      'JSONPath' => 'libraries/JSONPath/src/JSONPath.php',
      'JSONPathException' => 'libraries/JSONPath/src/JSONPathException.php',
      'JSONPathLexer' => 'libraries/JSONPath/src/JSONPathLexer.php',
      'JSONPathToken' => 'libraries/JSONPath/src/JSONPathToken.php',
      'AccessHelper' => 'libraries/JSONPath/src/AccessHelper.php',
      'AbstractFilter' => 'libraries/JSONPath/src/Filters/AbstractFilter.php',
      'IndexesFilter' => 'libraries/JSONPath/src/Filters/IndexesFilter.php',
      'IndexFilter' => 'libraries/JSONPath/src/Filters/IndexFilter.php',
      'QueryMatchFilter' => 'libraries/JSONPath/src/Filters/QueryMatchFilter.php',
      'QueryResultFilter' => 'libraries/JSONPath/src/Filters/QueryResultFilter.php',
      'RecursiveFilter' => 'libraries/JSONPath/src/Filters/RecursiveFilter.php',
      'SliceFilter' => 'libraries/JSONPath/src/Filters/SliceFilter.php',
    );
  }
  return $autoloads;
}

/**
 * Implements hook_libraries_info().
 */
function feeds_jsonpath_parser_libraries_info() {
  $libraries = array();
  $libraries['jsonpath'] = array(
    'name' => 'JSONPath',
    'vendor url' => 'https://github.com/SoftCreatR/JSONPath',
    'download url' => 'https://github.com/SoftCreatR/JSONPath/archive/' . FEEDS_JSONPATH_PARSER_LIBRARY_VERSION . '.tar.gz',
    'version' => FEEDS_JSONPATH_PARSER_LIBRARY_VERSION,
    'xautoload' => '_feeds_jsonpath_parser_xautoload_callback',
  );

  return $libraries;
}

/**
 * Callback for xautoload.
 *
 * @see feeds_jsonpath_parser_libraries_info()
 */
function _feeds_jsonpath_parser_xautoload_callback($adapter) {
  try {
    $adapter->composerJson('composer.json');
  }
  catch (Exception $e) {
    backdrop_set_message($e->getMessage(), 'error', FALSE);
  }
}

/**
 * Implements hook_feeds_plugins().
 */
function feeds_jsonpath_parser_feeds_plugins() {
  return array(
    'FeedsJSONPathParser' => array(
      'module' => 'feeds_jsonpath_parser',
      'name' => t('JSONPath parser'),
      'description' => t('Parse JSON files using JSONPath.'),
      'handler' => array(
        'module' => 'feeds_jsonpath_parser',
        'parent' => 'FeedsParser',
        'class' => 'FeedsJSONPathParser',
        'file' => 'FeedsJSONPathParser.inc',
        'path' => backdrop_get_path('module', 'feeds_jsonpath_parser'),
      ),
    ),
  );
}


/**
 * Loads the jsonpath library.
 */
function feeds_jsonpath_parser_load_library() {
  // Check first to see if the class is loaded some other way like
  // XAutoload (bundled version), Composer, or with Backdrop's autoload.
  if (!class_exists('\Flow\JSONPath\JSONPath', TRUE) && !class_exists('JSONPath', TRUE)) {
    // If not, then we can check if libraries is installed as a last resort.
    if (!module_exists('libraries')) {
      return FALSE;
    }
    $library = libraries_load('jsonpath');
    if ($library['loaded'] === FALSE) {
      return FALSE;
    }
    // We need to make sure that what is said to be the library here is actually
    // the one we wanted because they may have left the old one here.
    if (!class_exists('\Flow\JSONPath\JSONPath', TRUE)) {
      return FALSE;
    }
  }
  return TRUE;
}
